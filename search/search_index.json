{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ellar CLI Tool for Scaffolding Ellar Projects and Modules and also running Ellar Commands Introduction Ellar CLI is an abstracted tool for the Ellar web framework that helps in the standard project scaffold of the framework, module project scaffold, running the project local server using UVICORN, and running custom commands registered in the application module or any Ellar module. Requirements Python >= 3.7 Ellar Installation if you have ellar install ready pip install ellar-cli Full installation pip install ellar-cli [ full ] NB: Some shells may treat square braces ( [ and ] ) as special characters. If that's the case here, then use a quote around the characters to prevent unexpected shell expansion. pip install \"ellar-cli[full]\" Usage ellar --help","title":"Introduction"},{"location":"#introduction","text":"Ellar CLI is an abstracted tool for the Ellar web framework that helps in the standard project scaffold of the framework, module project scaffold, running the project local server using UVICORN, and running custom commands registered in the application module or any Ellar module.","title":"Introduction"},{"location":"#requirements","text":"Python >= 3.7 Ellar","title":"Requirements"},{"location":"#installation","text":"if you have ellar install ready pip install ellar-cli Full installation pip install ellar-cli [ full ]","title":"Installation"},{"location":"#nb","text":"Some shells may treat square braces ( [ and ] ) as special characters. If that's the case here, then use a quote around the characters to prevent unexpected shell expansion. pip install \"ellar-cli[full]\"","title":"NB:"},{"location":"#usage","text":"ellar --help","title":"Usage"},{"location":"command-grouping/","text":"Ella CLI provides a way by which commands can be grouped. For instance, a db command may have sub-commands like makemigrations , migrate , reset-db etc. To achieve this use-case, let us create a file commands.py in the root level of the project. from ellar.commands import EllarTyper db = EllarTyper ( name = \"db\" ) @db . command ( name = \"make-migrations\" ) def makemigrations (): \"\"\"Create DB Migration \"\"\" @db . command () def migrate (): \"\"\"Applies Migrations\"\"\" Register EllarTyper Command Lets, make the db visible on the CLI. In other for Ellar CLI to identify custom command, its has to be registered to a @Module class. from ellar.common import Module from ellar.core import ModuleBase from .commands import db @Module ( commands = [ db ]) class ApplicationModule ( ModuleBase ): pass open your terminal and navigate to project directory and run the command below ellar db --help command output Usage: Ellar, Python Web framework db [ OPTIONS ] COMMAND [ ARGS ] ... Options: --help Show this message and exit. Commands: make-migrations Create DB Migration migrate Applies Migrations","title":"Command Grouping"},{"location":"command-grouping/#register-ellartyper-command","text":"Lets, make the db visible on the CLI. In other for Ellar CLI to identify custom command, its has to be registered to a @Module class. from ellar.common import Module from ellar.core import ModuleBase from .commands import db @Module ( commands = [ db ]) class ApplicationModule ( ModuleBase ): pass open your terminal and navigate to project directory and run the command below ellar db --help command output Usage: Ellar, Python Web framework db [ OPTIONS ] COMMAND [ ARGS ] ... Options: --help Show this message and exit. Commands: make-migrations Create DB Migration migrate Applies Migrations","title":"Register EllarTyper Command"},{"location":"create-module-command/","text":"This command helps you create an Ellar project module, like a small app within a project. It depends on the existence of an Ellar project. ellar create-module my_project_module will create a folder as follows: john_doe/ \u251c\u2500 apps/ \u2502 \u251c\u2500 my_project_module/ \u2502 \u2502 \u251c\u2500 tests/ \u2502 \u2502 \u2502 \u251c\u2500 __init__.py \u2502 \u2502 \u251c\u2500 controllers.py \u2502 \u2502 \u251c\u2500 module.py \u2502 \u2502 \u251c\u2500 routers.py \u2502 \u2502 \u251c\u2500 services.py \u2502 \u2502 \u251c\u2500 __init__.py \u2502 \u251c\u2500 __init__.py \u251c\u2500 core/ \u251c\u2500 domain/ \u251c\u2500 tests/ \u2502 \u251c\u2500 __init__.py \u251c\u2500 __init__.py/ \u251c\u2500 config.py \u251c\u2500 root_module.py dsssss cxccccccxxcxxnew_file \u251c\u2500 server.py","title":"create module"},{"location":"create-project-command/","text":"This command helps you create just an Ellar project provided the \"pyproject.toml\" file exists in the working directory( CWD ) ellar create-project my_new_project will create a folder as follows: my_new_project/ \u251c\u2500 apps/ \u2502 \u251c\u2500 __init__.py \u251c\u2500 core/ \u251c\u2500 config.py \u251c\u2500 domain \u251c\u2500 root_module.py \u251c\u2500 server.py \u251c\u2500 __init__.py","title":"create project"},{"location":"custom-commands/","text":"In this section, we are going to go over how to create a custom command and throw more light on how Ella CLI works. Create Custom Command Let's create a file called commands.py at the root level of the project. # project_name/commands.py from ellar.common import command @command def my_new_command (): \"\"\"my_new_command cli description \"\"\" Custom Command with Context Ellar CLI tools is a wrapper round typer . So, therefore, we can easily get the command context by adding a parameter with the annotation of typer.Context Ellar CLI adds some meta-data CLI context that provides an interface for interaction with the Ellar project. For example: import typing as t import typer from ellar.common import command from ellar_cli.service import EllarCLIService from ellar_cli.constants import ELLAR_META @command def my_new_command ( ctx : typer . Context ): \"\"\"my_new_command CLI Description \"\"\" ellar_cli_service = t . cast ( t . Optional [ EllarCLIService ], ctx . meta . get ( ELLAR_META )) app = ellar_cli_service . import_application () EllarCLIService is an Ellar CLI meta-data for interacting with Ellar project. Some important method that may be of interest: import_application : returns application instance. get_application_config : gets current application config. Register a Custom Command Lets, make the my_new_command visible on the CLI. In other for Ellar CLI to identify custom command, its has to be registered to a @Module class. For example: # project_name/root_module.py from ellar.common import Module from ellar.core import ModuleBase from .commands import my_new_command @Module ( commands = [ my_new_command ]) class ApplicationModule ( ModuleBase ): pass open your terminal and navigate to project directory and run the command below ellar --help command output Usage: Ellar, Python Web framework [ OPTIONS ] COMMAND [ ARGS ] ... Options: -p, --project TEXT Run Specific Command on a specific project --install-completion [ bash | zsh | fish | powershell | pwsh ] Install completion for the specified shell. --show-completion [ bash | zsh | fish | powershell | pwsh ] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: create-module - Scaffolds Ellar Application Module - create-project - Scaffolds Ellar Application - my-new-command - my_new_command cli description new - Runs a complete Ellar project scaffold and creates... runserver - Starts Uvicorn Server - say-hi","title":"Custom Commands"},{"location":"custom-commands/#create-custom-command","text":"Let's create a file called commands.py at the root level of the project. # project_name/commands.py from ellar.common import command @command def my_new_command (): \"\"\"my_new_command cli description \"\"\"","title":"Create Custom Command"},{"location":"custom-commands/#custom-command-with-context","text":"Ellar CLI tools is a wrapper round typer . So, therefore, we can easily get the command context by adding a parameter with the annotation of typer.Context Ellar CLI adds some meta-data CLI context that provides an interface for interaction with the Ellar project. For example: import typing as t import typer from ellar.common import command from ellar_cli.service import EllarCLIService from ellar_cli.constants import ELLAR_META @command def my_new_command ( ctx : typer . Context ): \"\"\"my_new_command CLI Description \"\"\" ellar_cli_service = t . cast ( t . Optional [ EllarCLIService ], ctx . meta . get ( ELLAR_META )) app = ellar_cli_service . import_application () EllarCLIService is an Ellar CLI meta-data for interacting with Ellar project. Some important method that may be of interest: import_application : returns application instance. get_application_config : gets current application config.","title":"Custom Command with Context"},{"location":"custom-commands/#register-a-custom-command","text":"Lets, make the my_new_command visible on the CLI. In other for Ellar CLI to identify custom command, its has to be registered to a @Module class. For example: # project_name/root_module.py from ellar.common import Module from ellar.core import ModuleBase from .commands import my_new_command @Module ( commands = [ my_new_command ]) class ApplicationModule ( ModuleBase ): pass open your terminal and navigate to project directory and run the command below ellar --help command output Usage: Ellar, Python Web framework [ OPTIONS ] COMMAND [ ARGS ] ... Options: -p, --project TEXT Run Specific Command on a specific project --install-completion [ bash | zsh | fish | powershell | pwsh ] Install completion for the specified shell. --show-completion [ bash | zsh | fish | powershell | pwsh ] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: create-module - Scaffolds Ellar Application Module - create-project - Scaffolds Ellar Application - my-new-command - my_new_command cli description new - Runs a complete Ellar project scaffold and creates... runserver - Starts Uvicorn Server - say-hi","title":"Register a Custom Command"},{"location":"new-command/","text":"This command will help you kickstart your new Ellar project. It creates a new project for you with a directory structure and adds all required files for Ellar CLI to properly manage your project. ellar new my-project will create a folder as follows: my-project/ \u251c\u2500 my_project/ \u2502 \u251c\u2500 apps/ \u2502 \u2502 \u251c\u2500 __init__.py \u2502 \u251c\u2500 core/ \u2502 \u251c\u2500 config.py \u2502 \u251c\u2500 domain \u2502 \u251c\u2500 root_module.py \u2502 \u251c\u2500 server.py \u2502 \u251c\u2500 __init__.py \u251c\u2500 tests/ \u2502 \u251c\u2500 __init__.py \u251c\u2500 pyproject.toml \u251c\u2500 README.md If you want to name your project differently than the folder, you can pass the --project-name option. ellar new my-project --project-name john-doe will create a folder as follows: my-project/ \u251c\u2500 john_doe/ \u2502 \u251c\u2500 apps/ \u2502 \u2502 \u251c\u2500 __init__.py \u2502 \u251c\u2500 core/ \u2502 \u251c\u2500 config.py \u2502 \u251c\u2500 domain \u2502 \u251c\u2500 root_module.py \u2502 \u251c\u2500 server.py \u2502 \u251c\u2500 __init__.py \u251c\u2500 tests/ \u2502 \u251c\u2500 __init__.py \u251c\u2500 pyproject.toml \u251c\u2500 README.md New Command CLI Options --project-name Set the resulting project module name. Defaults to folder-name is not provided.","title":"new"},{"location":"new-command/#new-command-cli-options","text":"--project-name Set the resulting project module name. Defaults to folder-name is not provided.","title":"New Command CLI Options"},{"location":"runserver-command/","text":"This is command is a wrapper around the UVICORN ASGI server. It helps to create a link necessary for UVICORN to run your Ellar application properly. ellar runserver --reload will product the following output: INFO: Will watch for changes in these directories: [ '/home/user/working-directory' ] INFO: Uvicorn running on http://127.0.0.1:8000 ( Press CTRL+C to quit ) INFO: Started reloader process [ 2934815 ] using WatchFiles INFO: APP SETTINGS MODULE: john_doe.config:DevelopmentConfig INFO: Started server process [ 2934818 ] INFO: Waiting for application startup. INFO: Application startup complete. Runserver CLI Options ellar runserver --help OR Please check Uvicorn CLI Options","title":"runserver"},{"location":"runserver-command/#runserver-cli-options","text":"ellar runserver --help OR Please check Uvicorn CLI Options","title":"Runserver CLI Options"}]}